service: python-lambdas


# Determines where to deploy, what stage, what VPC, etc.
# This applies to all lambdas (functions).
provider:
  name: aws
  runtime: python3.6
  stage: ${opt:stage, 'dev'}
  environment: ${file(env.yml):${opt:stage} }
  region: us-east-2
  vpc:
    securityGroupIds:
      - sg-04c1f7c6dc6b2be33
    subnetIds:
      - subnet-12305468


# Plugins to enhance the application
plugins:
  - serverless-python-requirements
  - serverless-plugin-warmup

# Specifies custom container
custom:
  pythonRequirements:
    dockerizePip: non-linux


# Excludes files that should not be packaged
package:
  exclude:
    - requirements.txt
    - input/**
    - tester.py
    - update_schema.py
    - test/**
    - '**/__pycache__/**'


# All lambdas (functions) to package.
functions:

  # Creates a new user
  user_create:
    warmup: true
    handler: handler.user_create

  # Logs in an existing user
  user_login:
    warmup: true
    handler: handler.user_login

  # Logs out an existing user
  user_logout:
    warmup: true
    handler: handler.user_logout

  # Updates an existing user
  user_update:
    warmup: true
    handler: handler.user_update

  # Updates any user
  user_update_any:
    warmup: true
    handler: handler.user_update_any

  # Gets application role info for all users
  user_access:
    warmup: true
    handler: handler.user_access

  # Gets a user with a session token
  user_get:
    warmup: true
    handler: handler.user_get

  # Gets user authentication info
  user_authenticate:
    warmup: true
    handler: handler.user_authenticate

  # Starts process of resetting a user's password
  user_reset_password_start:
    warmup: true
    handler: handler.user_reset_password_start

  # Finishes process of resetting a user's password
  user_reset_password_end:
    warmup: true
    handler: handler.user_reset_password_end

  # Creates a client
  client_create:
    warmup: true
    handler: handler.client_create

  # Gets all clients
  client_get_all:
    warmup: true
    handler: handler.client_get_all

  # Sets a single client
  client_update:
    warmup: true
    handler: handler.client_update

  client_division_create:
    warmup: true
    handler: handler.client_division_create

  client_division_get_all:
    warmup: true
    handler: handler.client_division_get_all

  client_division_update:
    warmup: true
    handler: handler.client_division_update

  # Endpoint for udf_story_air
  udf_story_air:
    warmup: true
    handler: handler.udf_story_air

  # Endpoint for udf_story_air_airlines
  udf_story_air_airlines:
    warmup: true
    handler: handler.udf_story_air_airlines

  # Endpoint for udf_story_air_cabins
  udf_story_air_cabins:
    warmup: true
    handler: handler.udf_story_air_cabins

  # Endpoint for udf_story_air_routes
  udf_story_air_routes:
    warmup: true
    handler: handler.udf_story_air_routes

  # Endpoint for udf_story_air_traffic
  udf_story_air_traffic:
    warmup: true
    handler: handler.udf_story_air_traffic

  # Endpoint for udf_story_hotel
  udf_story_hotel:
    warmup: true
    handler: handler.udf_story_hotel

  # Endpoint for udf_story_hotel_1
  udf_story_hotel_1:
    warmup: true
    handler: handler.udf_story_hotel_1

  # Endpoint for udf_story_hotel_2
  udf_story_hotel_2:
    warmup: true
    handler: handler.udf_story_hotel_2

  # Endpoint for udf_story_hotel_3
  udf_story_hotel_3:
    warmup: true
    handler: handler.udf_story_hotel_3

  # Endpoint for udf_story_hotel_4
  udf_story_hotel_4:
    warmup: true
    handler: handler.udf_story_hotel_4
